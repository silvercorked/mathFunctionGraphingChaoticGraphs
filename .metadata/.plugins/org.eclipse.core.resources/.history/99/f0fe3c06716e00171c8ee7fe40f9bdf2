package org.ball.move;

import java.awt.*;       // Using AWT's Graphics and Color
import java.awt.event.*; // Using AWT's event classes and listener interfaces
import java.util.Random;
import java.util.TimerTask;
import java.util.Timer;

import javax.swing.*;    // Using Swing's components and containers
/**
 * Custom Graphics Example: Using key/button to move a object left or right.
 * The moving object (sprite) is defined in its own class, with its own
 * operations and can paint itself.
 */
public class Movement extends JFrame {
   // Define constants for the various dimensions
   public static final int CANVAS_WIDTH = 1000;
   public static final int CANVAS_HEIGHT = 600;
   public static final Color CANVAS_BG_COLOR = Color.CYAN;
 
   private DrawCanvas canvas; // the custom drawing canvas (an inner class extends JPanel)
   private Sprite sprite;     // the moving object
   private Sprite oval;
   
   private Random rand = new Random();
   private int nextX;
   private int nextY;
 
   // Constructor to set up the GUI components and event handlers
   public Movement() {
      // Construct a sprite given x, y, width, height, color
      sprite = new Sprite(CANVAS_WIDTH / 2 - 5, CANVAS_HEIGHT / 2 - 40,
            10, 10, Color.RED);
      oval = new Sprite(50, 50, 500, 500, Color.BLACK);
      nextX = 0; 
      nextY = 0;
      // Set up a panel for the buttons
      JPanel btnPanel = new JPanel(new FlowLayout());
      JButton btnLeft = new JButton("Move Left ");
      btnPanel.add(btnLeft);
      btnLeft.addActionListener(new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent evt) {
            moveLeft();
            requestFocus(); // change the focus to JFrame to receive KeyEvent
         }
      });
      JButton btnRight = new JButton("Move Right");
      btnPanel.add(btnRight);
      btnRight.addActionListener(new ActionListener() {
         @Override
         public void actionPerformed(ActionEvent evt) {
            moveRight();
            requestFocus(); // change the focus to JFrame to receive KeyEvent
         }
      });
 
      // Set up the custom drawing canvas (JPanel)
      canvas = new DrawCanvas();
      canvas.setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));
 
      // Add both panels to this JFrame
      Container cp = getContentPane();
      cp.setLayout(new BorderLayout());
      cp.add(canvas, BorderLayout.CENTER);
      cp.add(btnPanel, BorderLayout.SOUTH);
 
      // "super" JFrame fires KeyEvent
      addKeyListener(new KeyAdapter() {
         @Override
         public void keyPressed(KeyEvent evt) {
            switch(evt.getKeyCode()) {
               case KeyEvent.VK_LEFT:  move(-1,0);  break;
               case KeyEvent.VK_RIGHT: move(1,0); break;
               case KeyEvent.VK_UP: move(0,-1); break;
               case KeyEvent.VK_DOWN: move(0, 1); break;
               case KeyEvent.VK_SHIFT: move(getCoordX(), getCoordY()); break;
            }
         }
      });
 
      setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      setTitle("Move a Sprite");
      pack();            // pack all the components in the JFrame
      setVisible(true);  // show it
      requestFocus();    // "super" JFrame requests focus to receive KeyEvent
      int ranX = (rand.nextBoolean()) ? -rand.nextInt(10)-1 : rand.nextInt(10)+1;
      int ranY = (rand.nextBoolean()) ? -rand.nextInt(10)-1 : rand.nextInt(10)+1;
      setCoords(ranX, ranY);
      move(getCoordX(), getCoordY());
      TimerTask n = new TimerTask() {
		
		@Override
		public void run() {
			move(getCoordX(), getCoordY());
		}
	};
	Timer t = new Timer();
	t.scheduleAtFixedRate(n, 10, 20);
   }
 
   // Helper method to move the sprite left
   private void moveLeft() {
      // Save the current dimensions for repaint to erase the sprite
      int savedX = sprite.x;
      // update sprite
      sprite.x -= 10;
      // Repaint only the affected areas, not the entire JFrame, for efficiency
      canvas.repaint(savedX, sprite.y, sprite.width, sprite.height); // Clear old area to background
      canvas.repaint(sprite.x, sprite.y, sprite.width, sprite.height); // Paint new location
   }
 
   // Helper method to move the sprite right
   private void moveRight() {
      // Save the current dimensions for repaint to erase the sprite
      int savedX = sprite.x;
   
      // update sprite
      sprite.x += 10;
      // Repaint only the affected areas, not the entire JFrame, for efficiency
      canvas.repaint(savedX, sprite.y, sprite.width, sprite.height); // Clear old area to background
      canvas.repaint(sprite.x, sprite.y, sprite.width, sprite.height); // Paint at new location
   }
   @Override
   public void move(int x, int y) {
	      // Save the current dimensions for repaint to erase the sprite
	      int savedX = sprite.x;
	      int savedY = sprite.y;
	      // update sprite
	      sprite.x += x;
	      sprite.y += y;
	      //Sprite a = new Sprite(savedX, savedY, 1, 1, Color.BLACK);
	      //canvas.addSprite(this.getGraphics(), a);
	      // Repaint only the affected areas, not the entire JFrame, for efficiency
	      canvas.repaint(savedX, savedY, sprite.width, sprite.height); // Clear old area to background
	      //canvas.repaint(savedX, savedY, a.width, a.height);
	      canvas.repaint(sprite.x, sprite.y, sprite.width, sprite.height); // Paint at new location
	      System.out.println(distanceFormula(oval.width/2-5, oval.height/2-40, sprite.x, sprite.y));
	      if(sprite.x >= canvas.getWidth() || sprite.x <= 0){ //check if we go out of bounds
    		  int triX = (sprite.x > savedX) ? sprite.x - savedX : savedX - sprite.x;
    		  int triY = (sprite.y > savedY) ? sprite.y - savedY : -(savedY - sprite.y);
    		  System.out.println("triX: " + triX + " triY: " + triY);
    		  System.out.println(sprite.x + " " + sprite.y);
    		  if(sprite.x >= canvas.getWidth()){
    			  setCoords(-triX, triY);
    			  move(-triX, triY);
    		  }
    		  else{
    			  setCoords(triX, triY);
    			  move(triX, triY);
    		  }
	      }
	      //else if(distanceFormula(oval.width/2,oval.height/2, sprite.x, sprite.y) > CANVAS_WIDTH+10){
    	//	  sprite.x = CANVAS_WIDTH/2 - 5;
    	//	  sprite.y = CANVAS_HEIGHT/2 -40;
    	//	  System.out.println("   " + oval.width + "     " + oval.height);
    	 // }
	      //else if(distanceFormula(oval.width/2-5,oval.height/2-40, sprite.x, sprite.y) > oval.width){
	    	//  int triX = (sprite.x > savedX) ? sprite.x - savedX : savedX - sprite.x;
	    	 // int triY = (sprite.y > savedY) ? sprite.y - savedY : savedY - sprite.y;
	    	  //System.out.println("triX: " + triX + " triY: " + triY);
    		 // System.out.println(sprite.x + " " + sprite.y);
    		 // setCoords(-triX, -triY);
    		//  move(-triX, -triY);
	//      }
	      else if(sprite.y >= canvas.getHeight() || sprite.y <= 0){
	    	  int triX = (sprite.x > savedX) ? sprite.x - savedX : -(savedX - sprite.x);
	    	  int triY = (sprite.y > savedY) ? sprite.y - savedY : savedY - sprite.y;
	    	  System.out.println("triX: " + triX + " triY: " + triY);
    		  System.out.println(sprite.x + " " + sprite.y);
	    	  if(sprite.y >= canvas.getHeight()){
	    		  setCoords(triX, -triY);
    		  }
    		  else{
    			  setCoords(triX, triY);
    		  }
	      }
	   }
   public void setCoords(int x, int y){
	   nextX = x;
	   nextY = y; 
   }
   
   public int getCoordX(){
	   return nextX;
   }
   public int getCoordY(){
	   return nextY;
   }
   private double distanceFormula(int x, int y, int x2, int y2){
	   return (Math.sqrt(Math.abs(x*x-x2*x2)))+(Math.sqrt(Math.abs(y*y-y2*y2)));
   }
   // Define inner class DrawCanvas, which is a JPanel used for custom drawing
   class DrawCanvas extends JPanel {
      @Override
      public void paintComponent(Graphics g) {
         super.paintComponent(g);
         setBackground(CANVAS_BG_COLOR);
         oval.paint(g);
         sprite.paint(g);  // the sprite paints itself
         
      }
      public void addSprite(Graphics g, Sprite a){
    	  super.paintComponent(g);
    	  a.paint(g);
      }
   }
}